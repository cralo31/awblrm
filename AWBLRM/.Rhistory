dlt_cycle = c(-1, -1, -1, 2, -1, -1, 3, -1, 2)
obs_time = c(90, 45, 90, 35, 90, 75, 80, 90, 55)
test = decision_dose(all_doses, max_cycle, cycle_time, mode, target, od_control, cohort, dlt,
dose, dlt_cycle, obs_time)
test
document()
library(AWBLRM)
?decision_dose
all_doses = c(1, 2, 3, 4, 5)
max_cycle = 3
cycle_time = 30
mode = 1
target = 0.25
od_control = 1
cohort = c(1, 1, 1, 2, 2, 2, 3, 3, 3)
dlt = c(0, 0, 0, 1, 0, 0, 1, 0, 1)
dose = c(1, 1, 1, 2, 2, 2, 2, 2, 2)
dlt_cycle = c(-1, -1, -1, 2, -1, -1, 3, -1, 2)
obs_time = c(90, 45, 90, 35, 90, 75, 80, 90, 55)
test = decision_dose(all_doses, max_cycle, cycle_time, mode, target, od_control, cohort, dlt,
dose, dlt_cycle, obs_time)
test
?run_stan2
target = c(0.2, 0.33)
mode = 3
test
all_doses = c(1, 2, 3, 4, 5)
max_cycle = 3
cycle_time = 30
mode = 1
target = 0.25
od_control = 1
cohort = c(1, 1, 1, 2, 2, 2, 3, 3, 3)
dlt = c(0, 0, 0, 1, 0, 0, 1, 0, 1)
dose = c(1, 1, 1, 2, 2, 2, 2, 2, 2)
dlt_cycle = c(-1, -1, -1, 2, -1, -1, 3, -1, 2)
obs_time = c(90, 45, 90, 35, 90, 75, 80, 90, 55)
test = decision_dose(all_doses, max_cycle, cycle_time, mode, target, od_control, cohort, dlt,
dose, dlt_cycle, obs_time)
mode = 3
target = 0.25
target = c(0.2, 0.33)
?decision_dose
test = decision_dose(all_doses, max_cycle, cycle_time, mode, target, od_control, cohort, dlt,
dose, dlt_cycle, obs_time)
test
test
mode = 3
# Determine next recommended dose depending on implemented decision rule
decision = decision_rule(dose_levels, mat$dose, tail(mat$dose, 1), target, fit[,1], fit[,2], mode, od_control)
decision
mode = 4
# Determine next recommended dose depending on implemented decision rule
decision = decision_rule(dose_levels, mat$dose, tail(mat$dose, 1), target, fit[,1], fit[,2], mode, od_control)
decision
vital = rbind(decision$info[c(3,4), decision$safety])
vital
vital = rbind(decision$info[c(3,4),], decision$safety])
vital = rbind(decision$info[c(3,4),], decision$safety)
vital
vital = rbind(decision$info[3,], decision$ratio[,2], decision$info[4,], decision$safety)
rownames(vital) = c("Prob DLT", "Overdose Probability", "Patient Protection")
vital = rbind(decision$info[3,], decision$ratio[,2], decision$info[4,], decision$safety)
rownames(vital) = c("Prob DLT", "Proportion of Overlap", "Prob Overdose", "Patient Protection")
vital
library(AWBLRM)
document()
?decision_dose
document()
?decision_dose
all_doses = c(1, 2, 3, 4, 5)
max_cycle = 3
cycle_time = 30
mode = 1
target = 0.25
od_control = 1
cohort = c(1, 1, 1, 2, 2, 2, 3, 3, 3)
dlt = c(0, 0, 0, 1, 0, 0, 1, 0, 1)
dose = c(1, 1, 1, 2, 2, 2, 2, 2, 2)
dlt_cycle = c(-1, -1, -1, 2, -1, -1, 3, -1, 2)
obs_time = c(90, 45, 90, 35, 90, 75, 80, 90, 55)
test = decision_dose(all_doses, max_cycle, cycle_time, mode, target, od_control, cohort, dlt,
dose, dlt_cycle, obs_time)
test
mode = 2
all_doses = c(1, 2, 3, 4, 5)
max_cycle = 3
cycle_time = 30
mode = 1
target = 0.25
od_control = 1
cohort = c(1, 1, 1, 2, 2, 2, 3, 3, 3)
dlt = c(0, 0, 0, 1, 0, 0, 1, 0, 1)
dose = c(1, 1, 1, 2, 2, 2, 2, 2, 2)
dlt_cycle = c(-1, -1, -1, 2, -1, -1, 3, -1, 2)
obs_time = c(90, 45, 90, 35, 90, 75, 80, 90, 55)
test = decision_dose(all_doses, max_cycle, cycle_time, mode, target, od_control, cohort, dlt,
dose, dlt_cycle, obs_time)
test = decision_dose(all_doses, max_cycle, cycle_time, mode, target, od_control, cohort, dlt,
dose, dlt_cycle, obs_time)
test
mode = 2
test
test = decision_dose(all_doses, max_cycle, cycle_time, mode, target, od_control, cohort, dlt,
dose, dlt_cycle, obs_time)
test
mode = 3
target = c(0.2, 0.33)
test = decision_dose(all_doses, max_cycle, cycle_time, mode, target, od_control, cohort, dlt,
dose, dlt_cycle, obs_time)
test
mode = 4
test = decision_dose(all_doses, max_cycle, cycle_time, mode, target, od_control, cohort, dlt,
dose, dlt_cycle, obs_time)
test
target
# Determine next recommended dose depending on implemented decision rule
decision = decision_rule(dose_levels, mat$dose, tail(mat$dose, 1), target, fit[,1], fit[,2], mode, od_control)
decision
mode
# Calculate weight of each observation according to observed information
weight = find_weight(length(cohort), dlt, obs_time, cycle_time, max_cycle, dlt_cycle)
# Combine information into a matrix
mat = data.frame(cbind(cohort, dlt, dose, dlt_cycle, obs_time, weight))
# Run stan to find the betas
fit = run_stan2(mat, 500, mcmc_samples, mcmc_chains, 1, 0.95)
# Determine next recommended dose depending on implemented decision rule
decision = decision_rule(dose_levels, mat$dose, tail(mat$dose, 1), target, fit[,1], fit[,2], mode, od_control)
parallel.trial()
decision_dose
library(AWBLRM)
library()
test = decision_dose(all_doses, max_cycle, cycle_time, mode, target, od_control, cohort, dlt,
dose, dlt_cycle, obs_time)
test
decision_dose
library(AWBLRM)
decision_dose()
decision_dose
all_doses = c(1, 2, 3, 4, 5)
max_cycle = 3
cycle_time = 30
mode = 1
target = 0.25
od_control = 1
cohort = c(1, 1, 1, 2, 2, 2, 3, 3, 3)
dlt = c(0, 0, 0, 1, 0, 0, 1, 0, 1)
dose = c(1, 1, 1, 2, 2, 2, 2, 2, 2)
dlt_cycle = c(-1, -1, -1, 2, -1, -1, 3, -1, 2)
obs_time = c(90, 45, 90, 35, 90, 75, 80, 90, 55)
test = decision_dose(all_doses, max_cycle, cycle_time, mode, target, od_control, cohort, dlt,
dose, dlt_cycle, obs_time)
devtools::install(local = FALSE)
library(AWBLRM)
?decision.dose
document()
library(devtools)
document()
library(AWBLRM)
load_all(getwd())
library(AWBLRM)
library.dynam.unload()
library.dynam.unload(AWBLRM.dll)
library.dynam.unload(AWBLRM.dll, getwd())
?decision.dose
all_doses = c(1, 2, 3, 4, 5)
max_cycle = 3
cycle_time = 30
mode = 1
target = 0.25
od_control = 1
cohort = c(1, 1, 1, 2, 2, 2, 3, 3, 3)
dlt = c(0, 0, 0, 1, 0, 0, 1, 0, 1)
dose = c(1, 1, 1, 2, 2, 2, 2, 2, 2)
dlt_cycle = c(-1, -1, -1, 2, -1, -1, 3, -1, 2)
obs_time = c(90, 45, 90, 35, 90, 75, 80, 90, 55)
test = decision.dose(all_doses, max_cycle, cycle_time, mode, target, od_control, cohort, dlt,
dose, dlt_cycle, obs_time)
?parallel.trial
dose1 = rbind(1:5, c(0.05, 0.1, 0.25, 0.4, 0.6))
n1 = 4
cores1 = 4
K1 = 2
size1 = 3
cycle_prob1 = c(0.5, 0.5)
cycle_time1 = 30
samples1 = 36
assessment1 = 1
fixed1 = TRUE
mode1 = 1
stopping1 = 1
least1 = 12
dropout1 = FALSE
od_control1 = 0.8
target1 = 0.25
# Simulate 4 trials in parallel with 4 cores according to the defined parameters. #
test = parallel.trial(dose1, n1, cores1, K1, size1, cycle_prob1, cycle_time1, target1, samples1, assessment1,
fixed1, mode1, stopping1, least1, dropout1, od_control1)
test
test$result
?decision.dose
all_doses = c(1, 2, 3, 4, 5)
max_cycle = 3
cycle_time = 30
mode = 1
target = 0.25
od_control = 1
cohort = c(1, 1, 1, 2, 2, 2, 3, 3, 3)
dlt = c(0, 0, 0, 1, 0, 0, 1, 0, 1)
dose = c(1, 1, 1, 2, 2, 2, 2, 2, 2)
dlt_cycle = c(-1, -1, -1, 2, -1, -1, 3, -1, 2)
obs_time = c(90, 45, 90, 35, 90, 75, 80, 90, 55)
test = decision.dose(all_doses, max_cycle, cycle_time, mode, target, od_control, cohort, dlt,
dose, dlt_cycle, obs_time)
library(AWBLRM)
document()
document()
library(AWBLRM)
document()
all_doses = c(1, 2, 3, 4, 5)
max_cycle = 3
cycle_time = 30
mode = 1
target = 0.25
od_control = 1
cohort = c(1, 1, 1, 2, 2, 2, 3, 3, 3)
dlt = c(0, 0, 0, 1, 0, 0, 1, 0, 1)
dose = c(1, 1, 1, 2, 2, 2, 2, 2, 2)
dlt_cycle = c(-1, -1, -1, 2, -1, -1, 3, -1, 2)
obs_time = c(90, 45, 90, 35, 90, 75, 80, 90, 55)
test = decision.dose(all_doses, max_cycle, cycle_time, mode, target, od_control, cohort, dlt,
dose, dlt_cycle, obs_time)
all_doses = c(1, 2, 3, 4, 5)
max_cycle = 3
cycle_time = 30
mode = 1
target = 0.25
od_control = 1
cohort = c(1, 1, 1, 2, 2, 2, 3, 3, 3)
dlt = c(0, 0, 0, 1, 0, 0, 1, 0, 1)
dose = c(1, 1, 1, 2, 2, 2, 2, 2, 2)
dlt_cycle = c(-1, -1, -1, 2, -1, -1, 3, -1, 2)
obs_time = c(90, 45, 90, 35, 90, 75, 80, 90, 55)
test = decision.dose(all_doses, max_cycle, cycle_time, mode, target, od_control, cohort, dlt,
dose, dlt_cycle, obs_time)
all_doses = c(1, 2, 3, 4, 5)
max_cycle = 3
cycle_time = 30
mode = 1
target = 0.25
od_control = 1
cohort = c(1, 1, 1, 2, 2, 2, 3, 3, 3)
dlt = c(0, 0, 0, 1, 0, 0, 1, 0, 1)
dose = c(1, 1, 1, 2, 2, 2, 2, 2, 2)
dlt_cycle = c(-1, -1, -1, 2, -1, -1, 3, -1, 2)
obs_time = c(90, 45, 90, 35, 90, 75, 80, 90, 55)
test = decision.dose(all_doses, max_cycle, cycle_time, mode, target, od_control, cohort, dlt,
dose, dlt_cycle, obs_time)
# Calculate weight of each observation according to observed information
weight = find_weight(length(cohort), dlt, obs_time, cycle_time, max_cycle, dlt_cycle)
document()
library(AWBLRM)
?decision.dose
all_doses = c(1, 2, 3, 4, 5)
max_cycle = 3
cycle_time = 30
mode = 1
target = 0.25
od_control = 1
cohort = c(1, 1, 1, 2, 2, 2, 3, 3, 3)
dlt = c(0, 0, 0, 1, 0, 0, 1, 0, 1)
dose = c(1, 1, 1, 2, 2, 2, 2, 2, 2)
dlt_cycle = c(-1, -1, -1, 2, -1, -1, 3, -1, 2)
obs_time = c(90, 45, 90, 35, 90, 75, 80, 90, 55)
test = decision.dose(all_doses, max_cycle, cycle_time, mode, target, od_control, cohort, dlt,
dose, dlt_cycle, obs_time)
test
library(methods)
remove.packages(AWBLRM)
.libPaths()
library()
remove.packages('AWCRM')
library(abind)
library()
remove.packages('AWBLRM')
library()
getwd()
devtools::install_local(getwd())
?install_local
devtools::install_local(getwd(), dependencies = TRUE, type = "source")
library(AWBLRM)
library()
devtools::install_local(getwd(), dependencies = TRUE, type = "source")
remove.packages("AWBLRM")
devtools::install_local(getwd(), dependencies = TRUE, type = "source")
build()
devtools::build()
devtools::install_local("C:/Users/yuton/Dropbox/Takeda/AWBLRM_0.0.1.tar.gz", dependencies = TRUE, type = "source")
install.packages("C:/Users/yuton/Dropbox/Takeda/AWBLRM_0.0.1.tar.gz", repos = NULL, type = "source")
library(AWBLRM)
library()
?parallel.trial
remove.packages(AWBLRM)
remove.packages("AWBLRM")
remove.packages("LaplaceDemons")
remove.packages("LaplaceDemon")
remove.packages("LaplacesDemon")
install.packages("C:/Users/yuton/Dropbox/Takeda/AWBLRM_0.0.1.tar.gz", repos = NULL, type = "source", dependencies = TRUE)
install.packages("C:/Users/yuton/Dropbox/Takeda/AWBLRM.tar.gz", repos = NULL, type = "source", dependencies = TRUE)
library()
remove.packages("AWBLRM")
devtools::install_local("C:/Users/yuton/Dropbox/Takeda/AWBLRM.tar.gz", type = "source", dependencies = TRUE)
install.packages("C:/Users/yuton/Dropbox/Takeda/AWBLRM.tar.gz", type = "source", dependencies = TRUE)
install.packages("C:/Users/yuton/Dropbox/Takeda/AWBLRM.tar", type = "source", dependencies = TRUE)
library()
install.packages("C:/Users/yuton/Dropbox/Takeda/AWBLRM.tar.gz", type = "source", dependencies = TRUE)
devtools::install("C:/Users/yuton/Dropbox/Takeda/AWBLRM.tar.gz", dependencies = TRUE)
devtools::install("C:/Users/yuton/Dropbox/", dependencies = TRUE)
devtools::install("C:/Users/yuton/Dropbox", dependencies = TRUE)
devtools::install("C:/Users/yuton/Dropbox/", dependencies = TRUE)
devtools::install("C:/Users/yuton/Dropbox/AWBLRM.tar.gz", dependencies = TRUE)
devtools::install("C:/Users/yuton/Dropbox/AWBLRM", dependencies = TRUE)
devtools::install("C:/Users/yuton/Dropbox/Takeda", dependencies = TRUE)
devtools::install("C:/Users/yuton/Dropbox/Takeda/AWBLRM", dependencies = TRUE)
devtools::install("C:/Users/yuton/Dropbox/Takeda/AWBLRM", dependencies = TRUE)
lib
library()
library(AWBLRM)
document()
library(devtools)
document()
?parall
?parallel.trial
document()
remove.packages()
remove.packages("AWBLRM")
library(devtools)
devtools::install(getwd(), dependencies = TRUE)
getwd()
library()
AWBLRM
library(AWBLRM)
library(devtools)
devtools::install(getwd(), dependencies = TRUE)
library(AWBLRM)
?parallel.trial
library(AWBLRM)
?parallel.trial
document()
library(devtools)
document()
?parallel.trial
set.seed(1031)
dose1 = rbind(1:5, c(0.05, 0.1, 0.25, 0.4, 0.6))
n1 = 4
cores1 = 4
K1 = 2
size1 = 3
cycle_prob1 = c(0.5, 0.5)
cycle_time1 = 30
samples1 = 36
assessment1 = 1
fixed1 = TRUE
mode1 = 1
stopping1 = 1
least1 = 12
dropout1 = FALSE
od_control1 = 0.8
target1 = 0.25
mcmc_chains = 2
mcmc_samples = 2000
# Simulate 4 trials in parallel with 4 cores according to the defined parameters. #
test = parallel.trial(dose1, n1, cores1, K1, size1, cycle_prob1, cycle_time1, target1, samples1, assessment1,
fixed1, mode1, stopping1, least1, dropout1, od_control1, mcmc_chains, mcmc_samples)
test
test$result
library(AWBLRM)
document()
?parallel.trial
set.seed(1031)
dose1 = rbind(1:5, c(0.05, 0.1, 0.25, 0.4, 0.6))
n1 = 4
cores1 = 4
K1 = 2
size1 = 3
cycle_prob1 = c(0.5, 0.5)
cycle_time1 = 30
samples1 = 36
assessment1 = 1
fixed1 = TRUE
mode1 = 1
stopping1 = 1
least1 = 12
dropout1 = FALSE
od_control1 = 0.8
target1 = 0.25
mcmc_chains = 4
mcmc_samples = 1000
# Simulate 4 trials in parallel with 4 cores according to the defined parameters. #
test = parallel.trial(dose1, n1, cores1, K1, size1, cycle_prob1, cycle_time1, target1, samples1, assessment1,
fixed1, mode1, stopping1, least1, dropout1, od_control1, mcmc_chains, mcmc_samples)
test
test$result
library(AWBLRM)
library(AWBLRM)
document()
?parallel.trial
?parallel.trial
document()
library(AWBLRM)
document()
?`parallel.trial
()
?parallel.trial
set.seed(1031)
dose1 = rbind(1:5, c(0.05, 0.1, 0.25, 0.4, 0.6))
n1 = 4
cores1 = 4
K1 = 2
size1 = 3
cycle_prob1 = c(0.5, 0.5)
cycle_time1 = 30
samples1 = 36
assessment1 = 1
fixed1 = TRUE
mode1 = 1
stopping1 = 1
least1 = 12
dropout1 = FALSE
od_control1 = 0.8
target1 = 0.25
mcmc_chains = 4
mcmc_samples = 1000
# Simulate 4 trials in parallel with 4 cores according to the defined parameters. #
test = parallel.trial(dose1, n1, cores1, K1, size1, cycle_prob1, cycle_time1, target1, samples1, assessment1,
fixed1, mode1, stopping1, least1, dropout1, od_control1, mcmc_chains, mcmc_samples)
test$result
library(AWBLRM)
?parallel.trial
?parallel.trial
set.seed(1031)
dose1 = rbind(1:5, c(0.05, 0.1, 0.25, 0.4, 0.6))
n1 = 4
cores1 = 4
K1 = 2
size1 = 3
cycle_prob1 = c(0.5, 0.5)
cycle_time1 = 30
samples1 = 36
assessment1 = 1
fixed1 = TRUE
mode1 = 1
stopping1 = 1
least1 = 12
dropout1 = FALSE
od_control1 = 0.8
target1 = 0.25
mcmc_chains = 4
mcmc_samples = 1000
# Simulate 4 trials in parallel with 4 cores according to the defined parameters. #
test = parallel.trial(dose1, n1, cores1, K1, size1, cycle_prob1, cycle_time1, target1, samples1, assessment1,
fixed1, mode1, stopping1, least1, dropout1, od_control1, mcmc_chains, mcmc_samples)
test$result
test$all_trials
?decision.dose
?parallel.trial
n1 = 1000
cores1 = 8
K1 = 2
size1 = 3
cycle_prob1 = c(0.33, 0.67)
cycle_time1 = 30
samples1 = 36
assessment1 = 1
fixed1 = TRUE
stopping1 = 1
least1 = 12
dropout1 = FALSE
od_control1 = 1
mcmc_chains = 3
mcmc_samples = 2000
# With overdose control
# Rule 1
target1 = 0.25
mode1 = 1
vlow = rbind(1:5, c(0.01, 0.02, 0.05, 0.1, 0.25))
low = rbind(1:5, c(0.03, 0.06, 0.1, 0.25, 0.45))
medium = rbind(1:5, c(0.05, 0.1, 0.25, 0.4, 0.6))
high = rbind(1:5, c(0.1, 0.25, 0.4, 0.6, 0.75))
vhigh = rbind(1:5, c(0.25, 0.45, 0.6, 0.75, 0.85))
n1 = 8
t.vlow = parallel.trial(vlow, n1, cores1, K1, size1, cycle_prob1, cycle_time1, target1, samples1, assessment1,
fixed1, mode1, stopping1, least1, dropout1, od_control1, mcmc_chains, mcmc_samples)
t.vlow
t.vlow$result
t.low = parallel.trial(low, n1, cores1, K1, size1, cycle_prob1, cycle_time1, target1, samples1, assessment1,
fixed1, mode1, stopping1, least1, dropout1, od_control1, mcmc_chains, mcmc_samples)
t.med = parallel.trial(medium, n1, cores1, K1, size1, cycle_prob1, cycle_time1, target1, samples1, assessment1,
fixed1, mode1, stopping1, least1, dropout1, od_control1, mcmc_chains, mcmc_samples)
t.high = parallel.trial(high, n1, cores1, K1, size1, cycle_prob1, cycle_time1, target1, samples1, assessment1,
fixed1, mode1, stopping1, least1, dropout1, od_control1, mcmc_chains, mcmc_samples)
t.vhigh = parallel.trial(vhigh, n1, cores1, K1, size1, cycle_prob1, cycle_time1, target1, samples1, assessment1,
fixed1, mode1, stopping1, least1, dropout1, od_control1, mcmc_chains, mcmc_samples)
t.low
# Bind the summary statistics of
all = rbind(t.vlow$result$summary, t.low$result$summary,
t.med$result$summary, t.high$result$summary, t.vhigh$result$summary)
all
#
info = list(vlow = t.vlow$result, low = t.low$result, medium = t.med$result,
high = t.high$result, vhigh = t.vhigh$result, all = all)
info
